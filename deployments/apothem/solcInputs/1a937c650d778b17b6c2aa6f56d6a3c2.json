{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/FathomVault.sol": {
      "content": "// SPDX-License-Identifier: GNU AGPLv3\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./Interfaces/IVault.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./VaultStorage.sol\";\nimport \"./Interfaces/IVaultEvents.sol\";\nimport \"./Interfaces/IAccountant.sol\";\nimport \"./Interfaces/IStrategy.sol\";\nimport \"./Interfaces/IDepositLimitModule.sol\";\nimport \"./Interfaces/IWithdrawLimitModule.sol\";\nimport \"./Interfaces/IFactory.sol\";\nimport \"./Interfaces/IStrategyManager.sol\";\nimport \"./Interfaces/ISharesManager.sol\";\nimport \"./Interfaces/ISetters.sol\";\nimport \"./Interfaces/IGovernance.sol\";\n\n/**\n@title Yearn V3 Vault\n@notice The Yearn VaultV3 is designed as a non-opinionated system to distribute funds of \ndepositors for a specific `asset` into different opportunities (aka Strategies)\nand manage accounting in a robust way.\n*/\n\n// Solidity version of the Vyper contract\ncontract FathomVault is AccessControl, IVault, ReentrancyGuard, VaultStorage, IVaultEvents {\n    // solhint-disable not-rely-on-time\n    // solhint-disable function-max-lines\n    // solhint-disable code-complexity\n    // solhint-disable var-name-mixedcase\n    // solhint-disable max-line-length\n    // solhint-disable ordering\n\n    // Factory address\n    address public immutable FACTORY;\n\n    error ProfitUnlockTimeTooLong();\n    error InsufficientFunds();\n    error ZeroAddress();\n    error MaxLoss();\n    error ERC20InsufficientAllowance();\n    error ERC20PermitExpired();\n    error ERC20PermitInvalidSignature();\n    error InsufficientShares();\n    error InactiveStrategy();\n    error StrategyIsShutdown();\n    error ExceedDepositLimit();\n    error ZeroValue();\n    error StrategyDebtIsLessThanAssetsNeeded();\n    error InsufficientAssets();\n    error TooMuchLoss();\n    error InvalidAssetDecimals();\n    error UsingModule();\n    error InvalidAsset();\n    error StrategyAlreadyActive();\n    error StrategyHasDebt();\n    error DebtDidntChange();\n    error StrategyHasUnrealisedLosses();\n    error DebtHigherThanMaxDebt();\n\n    // Constructor\n    constructor(\n        uint256 _profitMaxUnlockTime,\n        address _strategyManagerAddress,\n        address _sharesManagerAddress,\n        address _settersAddress,\n        address _governanceAddress\n    ) {\n        FACTORY = msg.sender;\n        // Must be less than one year for report cycles\n        if (_profitMaxUnlockTime > ONE_YEAR) {\n            revert ProfitUnlockTimeTooLong();\n        }\n\n        profitMaxUnlockTime = _profitMaxUnlockTime;\n        strategyManager = _strategyManagerAddress;\n        sharesManager = _sharesManagerAddress;\n        setters = _settersAddress;\n        governance = _governanceAddress;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(DEPOSIT_LIMIT_MANAGER, msg.sender);\n        _grantRole(ADD_STRATEGY_MANAGER, msg.sender);\n        _grantRole(MAX_DEBT_MANAGER, msg.sender);\n        _grantRole(DEBT_MANAGER, msg.sender);\n        _grantRole(REPORTING_MANAGER, msg.sender);\n\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                DOMAIN_TYPE_HASH,\n                keccak256(bytes(ISharesManager(sharesManager).name())), // \"Yearn Vault\" in the example\n                keccak256(bytes(API_VERSION)), // API_VERSION in the example\n                block.chainid, // Current chain ID\n                address(this) // Address of the contract\n            )\n        );\n\n    }\n\n    // SHARE MANAGEMENT\n    // ERC20\n    function _burnShares(uint256 shares, address owner) internal {\n        ISharesManager(sharesManager).burnShares(shares, owner);\n    }\n\n    // assets = shares * (total_assets / total_supply) --- (== price_per_share * shares)\n    function _convertToAssets(uint256 shares, Rounding rounding) internal view returns (uint256) {\n        return ISharesManager(sharesManager).convertToAssets(shares, rounding);\n    }\n\n    // shares = amount * (total_supply / total_assets) --- (== amount / price_per_share)\n    function _convertToShares(uint256 assets, Rounding rounding) internal view returns (uint256) {\n        return ISharesManager(sharesManager).convertToShares(assets, rounding);\n    }\n\n    // Used only to transfer tokens that are not the type managed by this Vault.\n    // Used to handle non-compliant tokens like USDT\n    function _erc20SafeTransferFrom(address token, address sender, address receiver, uint256 amount) internal {\n        ISharesManager(sharesManager).erc20SafeTransferFrom(token, sender, receiver, amount);\n    }\n\n    // Used only to send tokens that are not the type managed by this Vault.\n    // Used to handle non-compliant tokens like USDT\n    function _erc20SafeTransfer(address token, address receiver, uint256 amount) internal {\n        ISharesManager(sharesManager).erc20SafeTransfer(token, receiver, amount);\n    }\n\n    function _issueShares(uint256 shares, address recipient) internal {\n        ISharesManager(sharesManager).issueShares(shares, recipient);\n    }\n\n    // Issues shares that are worth 'amount' in the underlying token (asset).\n    // WARNING: this takes into account that any new assets have been summed \n    // to total_assets (otherwise pps will go down).\n    function _issueSharesForAmount(uint256 amount, address recipient) internal returns (uint256) {\n        return ISharesManager(sharesManager).issueSharesForAmount(amount, recipient);\n    }\n\n    // SETTERS\n    // @notice Set the new accountant address.\n    // @param new_accountant The new accountant address.\n    function setAccountant(address newAccountant) external override onlyRole(ACCOUNTANT_MANAGER) {\n        ISetters(setters).setAccountant(newAccountant);\n    }\n\n    // @notice Set the new default queue array.\n    // @dev Will check each strategy to make sure it is active.\n    // @param new_default_queue The new default queue array.\n    function setDefaultQueue(address[] calldata newDefaultQueue) external override onlyRole(QUEUE_MANAGER) {\n        ISetters(setters).setDefaultQueue(newDefaultQueue);\n    }\n\n    // @notice Set a new value for `use_default_queue`.\n    // @dev If set `True` the default queue will always be\n    //  used no matter whats passed in.\n    // @param use_default_queue new value.\n    function setUseDefaultQueue(bool _useDefaultQueue) external override onlyRole(QUEUE_MANAGER) {\n        ISetters(setters).setUseDefaultQueue(_useDefaultQueue);\n    }\n\n    // @notice Set the new deposit limit.\n    // @dev Can not be changed if a deposit_limit_module\n    //  is set or if shutdown.\n    // @param deposit_limit The new deposit limit.\n    function setDepositLimit(uint256 _depositLimit) external override onlyRole(DEPOSIT_LIMIT_MANAGER) {\n        ISharesManager(sharesManager).setDepositLimit(_depositLimit);\n    }\n\n    // @notice Set a contract to handle the deposit limit.\n    // @dev The default `deposit_limit` will need to be set to\n    //  max uint256 since the module will override it.\n    // @param deposit_limit_module Address of the module.\n    function setDepositLimitModule(address _depositLimitModule) external override onlyRole(DEPOSIT_LIMIT_MANAGER) {\n        ISetters(setters).setDepositLimitModule(_depositLimitModule);\n    }\n\n    // @notice Set a contract to handle the withdraw limit.\n    // @dev This will override the default `max_withdraw`.\n    // @param withdraw_limit_module Address of the module.\n    function setWithdrawLimitModule(address _withdrawLimitModule) external override onlyRole(WITHDRAW_LIMIT_MANAGER) {\n        ISetters(setters).setWithdrawLimitModule(_withdrawLimitModule);\n    }\n\n    // @notice Set the new minimum total idle.\n    // @param minimum_total_idle The new minimum total idle.\n    function setMinimumTotalIdle(uint256 _minimumTotalIdle) external override onlyRole(MINIMUM_IDLE_MANAGER) {\n        ISetters(setters).setMinimumTotalIdle(_minimumTotalIdle);\n    }\n\n    // @notice Set the new profit max unlock time.\n    // @dev The time is denominated in seconds and must be less than 1 year.\n    //  We only need to update locking period if setting to 0,\n    //  since the current period will use the old rate and on the next\n    //  report it will be reset with the new unlocking time.\n    \n    //  Setting to 0 will cause any currently locked profit to instantly\n    //  unlock and an immediate increase in the vaults Price Per Share.\n\n    // @param new_profit_max_unlock_time The new profit max unlock time.\n    function setProfitMaxUnlockTime(uint256 _newProfitMaxUnlockTime) external override onlyRole(PROFIT_UNLOCK_MANAGER) {\n        ISetters(setters).setProfitMaxUnlockTime(_newProfitMaxUnlockTime);\n    }\n\n    // VAULT STATUS VIEWS - GETTERS\n\n    // @notice Get the amount of shares that have been unlocked.\n    // @return The amount of shares that are have been unlocked.\n    function unlockedShares() external view override returns (uint256) {\n        return ISharesManager(sharesManager).unlockedShares();\n    }\n\n    // @notice Get the price per share (pps) of the vault.\n    // @dev This value offers limited precision. Integrations that require \n    //    exact precision should use convertToAssets or convertToShares instead.\n    // @return The price per share.\n    function pricePerShare() external view override returns (uint256) {\n        return _convertToAssets(10**ISharesManager(sharesManager).decimals(), Rounding.ROUND_DOWN);\n    }\n\n    // REPORTING MANAGEMENT\n    \n    // @notice Process the report of a strategy.\n    // @param strategy The strategy to process the report for.\n    // @return The gain and loss of the strategy.\n    function processReport(address strategy) external override onlyRole(REPORTING_MANAGER) nonReentrant returns (uint256, uint256) {\n        return IStrategyManager(strategyManager).processReport(strategy);\n    }\n\n    // @notice Used for governance to buy bad debt from the vault.\n    // @dev This should only ever be used in an emergency in place\n    //  of force revoking a strategy in order to not report a loss.\n    //  It allows the DEBT_PURCHASER role to buy the strategies debt\n    //  for an equal amount of `asset`. \n\n    // @param strategy The strategy to buy the debt for\n    // @param amount The amount of debt to buy from the vault.\n    function buyDebt(address strategy, uint256 amount) external override onlyRole(DEBT_PURCHASER) nonReentrant {\n        IGovernance(governance).buyDebt(strategy, amount);\n    }\n\n    // STRATEGY MANAGEMENT\n\n    // @notice Add a new strategy.\n    // @param new_strategy The new strategy to add.\n    function addStrategy(address newStrategy) external override onlyRole(ADD_STRATEGY_MANAGER) {\n        IStrategyManager(strategyManager).addStrategy(newStrategy);\n    }\n\n    // @notice Revoke a strategy.\n    // @param strategy The strategy to revoke.\n    function revokeStrategy(address strategy) external override onlyRole(REVOKE_STRATEGY_MANAGER) {\n        IStrategyManager(strategyManager).revokeStrategy(strategy, false);\n    }\n\n    // @notice Force revoke a strategy.\n    // @dev The vault will remove the strategy and write off any debt left \n    //    in it as a loss. This function is a dangerous function as it can force a \n    //    strategy to take a loss. All possible assets should be removed from the \n    //    strategy first via update_debt. If a strategy is removed erroneously it \n    //    can be re-added and the loss will be credited as profit. Fees will apply.\n    // @param strategy The strategy to force revoke.\n    function forceRevokeStrategy(address strategy) external override onlyRole(FORCE_REVOKE_MANAGER) {\n        IStrategyManager(strategyManager).revokeStrategy(strategy, true);\n    }\n\n    // DEBT MANAGEMENT\n\n    // @notice Update the max debt for a strategy.\n    // @param strategy The strategy to update the max debt for.\n    // @param new_max_debt The new max debt for the strategy.\n    function updateMaxDebtForStrategy(address strategy, uint256 newMaxDebt) external override onlyRole(MAX_DEBT_MANAGER) {\n        // Delegate call to StrategyManager\n        IStrategyManager(strategyManager).updateMaxDebtForStrategy(strategy, newMaxDebt);\n    }\n\n    // @notice Update the debt for a strategy.\n    // @param strategy The strategy to update the debt for.\n    // @param target_debt The target debt for the strategy.\n    // @return The amount of debt added or removed.\n    function updateDebt(address sender, address strategy, uint256 targetDebt) external override onlyRole(DEBT_MANAGER) nonReentrant returns (uint256) {\n        return IStrategyManager(strategyManager).updateDebt(sender, strategy, targetDebt);\n    }\n\n    // EMERGENCY MANAGEMENT\n\n    // @notice Shutdown the vault.\n    function shutdownVault() external override onlyRole(EMERGENCY_MANAGER) {\n        IGovernance(governance).shutdownVault();\n    }\n\n    // ## SHARE MANAGEMENT ##\n    // ## ERC20 + ERC4626 ##\n\n    // @notice Deposit assets into the vault.\n    // @param assets The amount of assets to deposit.\n    // @param receiver The address to receive the shares.\n    // @return The amount of shares minted.\n    function deposit(uint256 assets, address receiver) external override nonReentrant returns (uint256) {\n        return ISharesManager(sharesManager).deposit(msg.sender, receiver, assets);\n    }\n\n    // @notice Mint shares for the receiver.\n    // @param shares The amount of shares to mint.\n    // @param receiver The address to receive the shares.\n    // @return The amount of assets deposited.\n    function mint(uint256 shares, address receiver) external override nonReentrant returns (uint256) {\n        return ISharesManager(sharesManager).mint(msg.sender, receiver, shares);\n    }\n\n    // @notice Withdraw an amount of asset to `receiver` burning `owner`s shares.\n    // @dev The default behavior is to not allow any loss.\n    // @param assets The amount of asset to withdraw.\n    // @param receiver The address to receive the assets.\n    // @param owner The address who's shares are being burnt.\n    // @param max_loss Optional amount of acceptable loss in Basis Points.\n    // @param strategies Optional array of strategies to withdraw from.\n    // @return The amount of shares actually burnt.\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner,\n        uint256 maxLoss,\n        address[] memory _strategies\n    ) external override nonReentrant returns (uint256) {\n        return ISharesManager(sharesManager).withdraw(assets, receiver, owner, maxLoss, _strategies);\n    }\n\n    // @notice Redeems an amount of shares of `owners` shares sending funds to `receiver`.\n    // @dev The default behavior is to allow losses to be realized.\n    // @param shares The amount of shares to burn.\n    // @param receiver The address to receive the assets.\n    // @param owner The address who's shares are being burnt.\n    // @param max_loss Optional amount of acceptable loss in Basis Points.\n    // @param strategies Optional array of strategies to withdraw from.\n    // @return The amount of assets actually withdrawn.\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner,\n        uint256 maxLoss,\n        address[] memory _strategies\n    ) external override nonReentrant returns (uint256) {\n        return ISharesManager(sharesManager).redeem(shares, receiver, owner, maxLoss, _strategies);\n    }\n\n    // @notice Approve an address to spend the vault's shares.\n    // @param spender The address to approve.\n    // @param amount The amount of shares to approve.\n    // @return True if the approval was successful.\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        return ISharesManager(sharesManager).approve(msg.sender, spender, amount);\n    }\n\n    // @notice Transfer shares to a receiver.\n    // @param receiver The address to transfer shares to.\n    // @param amount The amount of shares to transfer.\n    // @return True if the transfer was successful.\n    function transfer(address receiver, uint256 amount) external override returns (bool) {\n        if (receiver == address(this) || receiver == address(0)) {\n            revert ZeroAddress();\n        }\n        ISharesManager(sharesManager).transfer(msg.sender, receiver, amount);\n        return true;\n    }\n\n    // @notice Transfer shares from a sender to a receiver.\n    // @param sender The address to transfer shares from.\n    // @param receiver The address to transfer shares to.\n    // @param amount The amount of shares to transfer.\n    // @return True if the transfer was successful.\n    function transferFrom(address sender, address receiver, uint256 amount) external override returns (bool) {\n        if (receiver == address(this) || receiver == address(0)) {\n            revert ZeroAddress();\n        }\n        return ISharesManager(sharesManager).transferFrom(sender, receiver, amount);\n    }\n\n    // ## ERC20+4626 compatibility\n\n    // @notice Increase the allowance for a spender.\n    // @param spender The address to increase the allowance for.\n    // @param amount The amount to increase the allowance by.\n    // @return True if the increase was successful.\n    function increaseAllowance(address spender, uint256 amount) external override returns (bool) {\n        return ISharesManager(sharesManager).increaseAllowance(msg.sender, spender, amount);\n    }\n\n    // @notice Decrease the allowance for a spender.\n    // @param spender The address to decrease the allowance for.\n    // @param amount The amount to decrease the allowance by.\n    // @return True if the decrease was successful.\n    function decreaseAllowance(address spender, uint256 amount) external override returns (bool) {\n        return ISharesManager(sharesManager).decreaseAllowance(msg.sender, spender, amount);\n    }\n\n    // @notice Approve an address to spend the vault's shares.\n    // @param owner The address to approve.\n    // @param spender The address to approve.\n    // @param amount The amount of shares to approve.\n    // @param deadline The deadline for the permit.\n    // @param v The v component of the signature.\n    // @param r The r component of the signature.\n    // @param s The s component of the signature.\n    // @return True if the approval was successful.\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override returns (bool) {\n        return ISharesManager(sharesManager).permit(owner, spender, amount, deadline, v, r, s);\n    }\n\n    // @notice Get the balance of a user.\n    // @param addr The address to get the balance of.\n    // @return The balance of the user.\n    function balanceOf(address addr) external view override returns (uint256) {\n        return ISharesManager(sharesManager).balanceOf(addr);\n    }\n\n    // @notice Get the total supply of shares.\n    // @return The total supply of shares.\n    function totalSupply() external view override returns (uint256) {\n        return ISharesManager(sharesManager).totalSupply();\n    }\n\n    // @notice Get the address of the asset.\n    // @return The address of the asset.\n    function asset() external view override returns (address) {\n        return ISharesManager(sharesManager).asset();\n    }\n\n    // @notice Get the number of decimals of the asset/share.\n    // @return The number of decimals of the asset/share.\n    function decimals() external view override returns (uint8) {\n        return ISharesManager(sharesManager).decimals();\n    }\n\n    // @notice Get the total assets held by the vault.\n    // @return The total assets held by the vault.\n    function totalAssets() external view override returns (uint256) {\n        return ISharesManager(sharesManager).totalAssets();\n    }\n\n    // @notice Convert an amount of assets to shares.\n    // @param assets The amount of assets to convert.\n    // @return The amount of shares.\n    function convertToShares(uint256 assets) external view override returns (uint256) {\n        return _convertToShares(assets, Rounding.ROUND_DOWN);\n    }\n\n    // @notice Preview the amount of shares that would be minted for a deposit.\n    // @param assets The amount of assets to deposit.\n    // @return The amount of shares that would be minted.\n    function previewDeposit(uint256 assets) external view override returns (uint256) {\n        return _convertToShares(assets, Rounding.ROUND_DOWN);\n    }\n\n    // @notice Preview the amount of assets that would be deposited for a mint.\n    // @param shares The amount of shares to mint.\n    // @return The amount of assets that would be deposited.\n    function previewMint(uint256 shares) external view override returns (uint256) {\n        return _convertToAssets(shares, Rounding.ROUND_UP);\n    }\n\n    // @notice Convert an amount of shares to assets.\n    // @param shares The amount of shares to convert.\n    // @return The amount of assets.\n    function convertToAssets(uint256 shares) external view override returns (uint256) {\n        return _convertToAssets(shares, Rounding.ROUND_DOWN);\n    }\n\n    // @notice Get the maximum amount of assets that can be deposited.\n    // @param receiver The address that will receive the shares.\n    // @return The maximum amount of assets that can be deposited.\n    function maxDeposit(address receiver) external view override returns (uint256) {\n        return ISharesManager(sharesManager).maxDeposit(receiver);\n    }\n\n    // @notice Get the maximum amount of shares that can be minted.\n    // @param receiver The address that will receive the shares.\n    // @return The maximum amount of shares that can be minted.\n    function maxMint(address receiver) external view override returns (uint256) {\n        return ISharesManager(sharesManager).maxMint(receiver);\n    }\n\n    // @notice Get the maximum amount of assets that can be withdrawn.\n    // @dev Complies to normal 4626 interface and takes custom params.\n    // @param owner The address that owns the shares.\n    // @param max_loss Custom max_loss if any.\n    // @param strategies Custom strategies queue if any.\n    // @return The maximum amount of assets that can be withdrawn.\n    function maxWithdraw(address owner, uint256 maxLoss, address[] memory _strategies) external override returns (uint256) {\n        return ISharesManager(sharesManager).maxWithdraw(owner, maxLoss, _strategies);\n    }\n\n    // @notice Get the maximum amount of shares that can be redeemed.\n    // @dev Complies to normal 4626 interface and takes custom params.\n    // @param owner The address that owns the shares.\n    // @param max_loss Custom max_loss if any.\n    // @param strategies Custom strategies queue if any.\n    // @return The maximum amount of shares that can be redeemed.\n    function maxRedeem(address owner, uint256 maxLoss, address[] memory _strategies) external override returns (uint256) {\n        return ISharesManager(sharesManager).maxRedeem(owner, maxLoss, _strategies);\n    }\n\n    // @notice Preview the amount of shares that would be redeemed for a withdraw.\n    // @param assets The amount of assets to withdraw.\n    // @return The amount of shares that would be redeemed.\n    function previewWithdraw(uint256 assets) external view override returns (uint256) {\n        return _convertToShares(assets, Rounding.ROUND_UP);\n    }\n\n    // @notice Preview the amount of assets that would be withdrawn for a redeem.\n    // @param shares The amount of shares to redeem.\n    // @return The amount of assets that would be withdrawn.\n    function previewRedeem(uint256 shares) external view override returns (uint256) {\n        return _convertToAssets(shares, Rounding.ROUND_DOWN);\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return ISharesManager(sharesManager).allowance(owner, spender);\n    }\n}"
    },
    "contracts/Interfaces/IAccountant.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\ninterface IAccountant {\n    function report(address strategy, uint256 gain, uint256 loss) external returns (uint256, uint256);\n}"
    },
    "contracts/Interfaces/IDepositLimitModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\ninterface IDepositLimitModule {\n    function availableDepositLimit(address receiver) external view returns (uint256);\n}"
    },
    "contracts/Interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * _Available since v4.7._\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    // solhint-disable ordering\n    // solhint-disable max-line-length\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 assets);\n}"
    },
    "contracts/Interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\ninterface IFactory {\n    function protocolFeeConfig() external view returns (uint16, address);\n}"
    },
    "contracts/Interfaces/IGovernance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\ninterface IGovernance {\n    function buyDebt(address strategy, uint256 amount) external;\n    function shutdownVault() external;\n}"
    },
    "contracts/Interfaces/ISetters.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\ninterface ISetters {\n    function setAccountant(address newAccountant) external;\n    function setDefaultQueue(address[] calldata newDefaultQueue) external;\n    function setUseDefaultQueue(bool _useDefaultQueue) external;\n    function setDepositLimit(uint256 _depositLimit) external;\n    function setDepositLimitModule(address _depositLimitModule) external;\n    function setWithdrawLimitModule(address _withdrawLimitModule) external;\n    function setMinimumTotalIdle(uint256 _minimumTotalIdle) external;\n    function setProfitMaxUnlockTime(uint256 _newProfitMaxUnlockTime) external;\n}"
    },
    "contracts/Interfaces/ISharesManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\nimport \"../VaultStructs.sol\";\nimport {IERC4626} from \"./IERC4626.sol\";\n\ninterface ISharesManager is IERC4626 {\n    // solhint-disable max-line-length\n    // solhint-disable ordering\n\n    function balanceOf(address addr) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function spendAllowance(address owner, address spender, uint256 amount) external;\n    function transfer(address sender, address receiver, uint256 amount) external;\n    function transferFrom(address sender, address receiver, uint256 amount) external returns (bool);\n    function approve(address owner, address spender, uint256 amount) external returns (bool);\n    function increaseAllowance(address owner, address spender, uint256 amount) external returns (bool);\n    function decreaseAllowance(address owner, address spender, uint256 amount) external returns (bool);\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\n    function burnShares(uint256 shares, address owner) external;\n    function unlockedShares() external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    function burnUnlockedShares() external;\n    function totalAssets() external view returns (uint256);\n    function convertToAssets(uint256 shares, Rounding rounding) external view returns (uint256);\n    function convertToShares(uint256 assets, Rounding rounding) external view returns (uint256);\n    function erc20SafeApprove(address token, address spender, uint256 amount) external;\n    function erc20SafeTransferFrom(address token, address sender, address receiver, uint256 amount) external;\n    function erc20SafeTransfer(address token, address receiver, uint256 amount) external;\n    function issueShares(uint256 shares, address recipient) external;\n    function issueSharesForAmount(uint256 amount, address recipient) external returns (uint256);\n    function maxDeposit(address receiver) external view returns (uint256);\n    function maxWithdraw(address owner, uint256 _maxLoss, address[] memory _strategies) external returns (uint256);\n    function deposit(address sender, address recipient, uint256 assets) external returns (uint256);\n    function mint(address sender, address recipient, uint256 shares) external returns (uint256);\n    function assessShareOfUnrealisedLosses(address strategy, uint256 assetsNeeded) external view returns (uint256);\n    function withdrawFromStrategy(address strategy, uint256 assetsToWithdraw) external;\n    function calculateShareManagement(uint256 loss, uint256 totalFees, uint256 protocolFees) external returns (ShareManagement memory shareManagement);\n    function handleShareBurnsAndIssues(ShareManagement memory shares, FeeAssessment memory fees, uint256 gain, uint256 loss, address strategy) external returns (uint256 , uint256);\n    function manageUnlockingOfShares(uint256 previouslyLockedShares, uint256 newlyLockedShares) external;\n    function setDepositLimit(uint256 _depositLimit) external;\n    function getTotalIdleAmount() external returns (uint256);\n    function setTotalIdleAmount(uint256 totalIdleAmount) external;\n    function getMinimumTotalIdle() external returns (uint256);\n    function setMinimumTotalIdle(uint256 minimumTotalIdle) external;\n    function setTotalDebtAmount(uint256 totalDebtAmount) external;\n    function depositToStrategy(address strategy, uint256 assetsToDeposit) external;\n}"
    },
    "contracts/Interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\ninterface IStrategy {\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256);\n    function deposit(uint256 assets, address receiver) external returns (uint256);\n    function asset() external view returns (address);\n    function balanceOf(address owner) external view returns (uint256);\n    function maxDeposit(address receiver) external view returns (uint256);\n    function totalAssets() external view returns (uint256);\n    function convertToAssets(uint256 shares) external view returns (uint256);\n    function convertToShares(uint256 assets) external view returns (uint256);\n    function previewWithdraw(uint256 assets) external view returns (uint256);\n    function maxRedeem(address owner) external view returns (uint256);\n}"
    },
    "contracts/Interfaces/IStrategyManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\ninterface IStrategyManager {\n    function addStrategy(address newStrategy) external;\n    function revokeStrategy(address strategy, bool force) external;\n    function updateMaxDebtForStrategy(address strategy, uint256 newMaxDebt) external;\n    function updateDebt(address sender, address strategy, uint256 targetDebt) external returns (uint256);\n    function processReport(address strategy) external returns (uint256, uint256);\n}"
    },
    "contracts/Interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\nimport \"../VaultStructs.sol\";\n\ninterface IVault {\n    // solhint-disable ordering\n    \n    function setAccountant(address newAccountant) external;\n\n    function setDefaultQueue(address[] memory newDefaultQueue) external;\n\n    function setUseDefaultQueue(bool) external;\n\n    function setDepositLimit(uint256 depositLimit) external;\n\n    function setDepositLimitModule(\n        address newDepositLimitModule\n    ) external;\n\n    function setWithdrawLimitModule(\n        address newWithdrawLimitModule\n    ) external;\n\n    function setMinimumTotalIdle(uint256 minimumTotalIdle) external;\n\n    function setProfitMaxUnlockTime(\n        uint256 newProfitMaxUnlockTime\n    ) external;\n\n    function processReport(\n        address strategy\n    ) external returns (uint256, uint256);\n\n    function buyDebt(address strategy, uint256 amount) external;\n\n    function addStrategy(address newStrategy) external;\n\n    function revokeStrategy(address strategy) external;\n\n    function forceRevokeStrategy(address strategy) external;\n\n    function updateMaxDebtForStrategy(\n        address strategy,\n        uint256 newMaxDebt\n    ) external;\n\n    function updateDebt(\n        address sender,\n        address strategy,\n        uint256 targetDebt\n    ) external returns (uint256);\n\n    function shutdownVault() external;\n\n    //// NON-STANDARD ERC-4626 FUNCTIONS \\\\\\\\\n\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner,\n        uint256 maxLoss,\n        address[] memory strategies\n    ) external returns (uint256);\n\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner,\n        uint256 maxLoss,\n        address[] memory strategies\n    ) external returns (uint256);\n\n    //// NON-STANDARD ERC-20 FUNCTIONS \\\\\\\\\n\n    function increaseAllowance(\n        address spender,\n        uint256 amount\n    ) external returns (bool);\n\n    function decreaseAllowance(\n        address spender,\n        uint256 amount\n    ) external returns (bool);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (bool);\n\n    function maxWithdraw(\n        address owner,\n        uint256 maxLoss,\n        address[] memory strategies\n    ) external returns (uint256);\n\n    function maxRedeem(\n        address owner,\n        uint256 maxLoss,\n        address[] memory strategies\n    ) external returns (uint256);\n\n    function unlockedShares() external view returns (uint256);\n\n    function pricePerShare() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function deposit(uint256 assets, address receiver) external returns (uint256);\n\n    function mint(uint256 shares, address receiver) external returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transfer(address receiver, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address receiver, uint256 amount) external returns (bool);\n\n    function balanceOf(address addr) external view returns (uint256);\n\n    function asset() external view returns (address);\n\n    function decimals() external view returns (uint8);\n\n    function totalAssets() external view returns (uint256);\n\n    function convertToShares(uint256 assets) external view returns (uint256);\n\n    function previewDeposit(uint256 assets) external view returns (uint256);\n\n    function previewMint(uint256 shares) external view returns (uint256);\n\n    function convertToAssets(uint256 shares) external view returns (uint256);\n\n    function maxDeposit(address receiver) external view returns (uint256);\n\n    function maxMint(address receiver) external view returns (uint256);\n\n    function previewWithdraw(uint256 assets) external view returns (uint256);\n\n    function previewRedeem(uint256 shares) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n}"
    },
    "contracts/Interfaces/IVaultEvents.sol": {
      "content": "// SPDX-License-Identifier: AGPL 3.0\n// Copyright Fathom 2023\n\npragma solidity ^0.8.16;\n\nimport \"../VaultStructs.sol\";\n\ninterface IVaultEvents {\n    // STRATEGY EVENTS\n    event StrategyChanged(address indexed strategy, StrategyChangeType changeType);\n    event StrategyReported(\n        address indexed strategy,\n        uint256 gain,\n        uint256 loss,\n        uint256 currentDebt,\n        uint256 protocolFees,\n        uint256 totalFees,\n        uint256 totalRefunds\n    );\n    // DEBT MANAGEMENT EVENTS\n    event DebtUpdated(\n        address indexed strategy,\n        uint256 currentDebt,\n        uint256 newDebt\n    );\n    // ROLE UPDATES\n    event RoleSet(address indexed account, bytes32 role);\n    event RoleStatusChanged(bytes32 indexed role, RoleStatusChange indexed status);\n    event UpdateRoleManager(address indexed roleManager);\n\n    event UpdateAccountant(address indexed accountant);\n    event UpdateDefaultQueue(address[] newDefaultQueue);\n    event UpdateUseDefaultQueue(bool useDefaultQueue);\n    event UpdatedMaxDebtForStrategy(\n        address indexed sender,\n        address indexed strategy,\n        uint256 newDebt\n    );\n    event UpdateDepositLimit(uint256 depositLimit);\n    event UpdateMinimumTotalIdle(uint256 minimumTotalIdle);\n    event UpdateProfitMaxUnlockTime(uint256 profitMaxUnlockTime);\n    event DebtPurchased(address indexed strategy, uint256 amount);\n    event Shutdown();\n\n    // STORAGE MANAGEMENT EVENTS\n    event UpdateDepositLimitModule(address indexed depositLimitModule);\n    event UpdateWithdrawLimitModule(address indexed withdrawLimitModule);\n}"
    },
    "contracts/Interfaces/IWithdrawLimitModule.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\ninterface IWithdrawLimitModule {\n    function availableWithdrawLimit(address owner, uint256 maxLoss, address[] calldata strategies) external returns (uint256);\n}"
    },
    "contracts/VaultStorage.sol": {
      "content": "// SPDX-License-Identifier: AGPL 3.0\n// Copyright Fathom 2023\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./VaultStructs.sol\";\n\ncontract VaultStorage {\n    // CONSTANTS\n    // The max length the withdrawal queue can be.\n    uint256 public constant MAX_QUEUE = 10;\n    // 100% in Basis Points.\n    uint256 public constant MAX_BPS = 10000;\n    // Extended for profit locking calculations.\n    uint256 public constant MAX_BPS_EXTENDED = 1000000000000;\n    // The version of this vault.\n    string public constant API_VERSION = \"1.0.0\";\n    uint256 public immutable ONE_YEAR = 31556952;\n\n    address public strategyManager;\n    address public sharesManager;\n    address public setters;\n    address public governance;\n\n    // STORAGE\n    // HashMap that records all the strategies that are allowed to receive assets from the vault.\n    mapping(address => StrategyParams) public strategies;\n\n    // The current default withdrawal queue.\n    address[] public defaultQueue;\n\n    // Should the vault use the default_queue regardless whats passed in.\n    bool public useDefaultQueue;\n\n    // ERC20 - amount of shares per account\n    mapping(address => uint256) internal _balanceOf;\n    // ERC20 - owner -> (spender -> amount)\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n    // Total amount of shares that are currently minted including those locked.\n    // NOTE: To get the ERC20 compliant version use totalSupply().\n    uint256 public totalSupplyAmount;\n\n    // Total amount of assets that has been deposited in strategies.\n    uint256 public totalDebtAmount;\n    // Current assets held in the vault contract. Replacing balanceOf(this) to avoid price_per_share manipulation.\n    uint256 public totalIdleAmount;\n    // Minimum amount of assets that should be kept in the vault contract to allow for fast, cheap redeems.\n    uint256 public minimumTotalIdle;\n    // Maximum amount of tokens that the vault can accept. If totalAssets > deposit_limit, deposits will revert.\n    uint256 public depositLimit;\n    // Contract that charges fees and can give refunds.\n    address public accountant;\n    // Contract to control the deposit limit.\n    address public depositLimitModule;\n    // Contract to control the withdraw limit.\n    address public withdrawLimitModule;\n\n    // HashMap mapping addresses to their roles\n    mapping(address => bytes32) public roles;\n    // HashMap mapping roles to their permissioned state. If false, the role is not open to the public.\n    mapping(bytes32 => bool) public openRoles;\n\n    // Address that can add and remove roles to addresses.\n    address public roleManager;\n    // Temporary variable to store the address of the next role_manager until the role is accepted.\n    address public futureRoleManager;\n\n    // State of the vault - if set to true, only withdrawals will be available. It can't be reverted.\n    bool public shutdown;\n    // The amount of time profits will unlock over.\n    uint256 public profitMaxUnlockTime;\n    // The timestamp of when the current unlocking period ends.\n    uint256 public fullProfitUnlockDate;\n    // The per second rate at which profit will unlock.\n    uint256 public profitUnlockingRate;\n    // Last timestamp of the most recent profitable report.\n    uint256 public lastProfitUpdate;\n\n    // EIP-2612 permit() nonces and typehashes\n    mapping(address => uint256) public nonces;\n    bytes32 public constant DOMAIN_TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    bytes32 public DOMAIN_SEPARATOR;\n    bytes32 public constant PERMIT_TYPE_HASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    // Roles\n    bytes32 public constant ACCOUNTANT_MANAGER = keccak256(\"ACCOUNTANT_MANAGER\");\n    bytes32 public constant QUEUE_MANAGER = keccak256(\"QUEUE_MANAGER\");\n    bytes32 public constant DEPOSIT_LIMIT_MANAGER = keccak256(\"DEPOSIT_LIMIT_MANAGER\");\n    bytes32 public constant WITHDRAW_LIMIT_MANAGER = keccak256(\"WITHDRAW_LIMIT_MANAGER\");\n    bytes32 public constant MINIMUM_IDLE_MANAGER = keccak256(\"MINIMUM_IDLE_MANAGER\");\n    bytes32 public constant PROFIT_UNLOCK_MANAGER = keccak256(\"PROFIT_UNLOCK_MANAGER\");\n    bytes32 public constant ROLE_MANAGER = keccak256(\"ROLE_MANAGER\");\n    bytes32 public constant REPORTING_MANAGER = keccak256(\"REPORTING_MANAGER\");\n    bytes32 public constant DEBT_PURCHASER = keccak256(\"DEBT_PURCHASER\");\n    bytes32 public constant ADD_STRATEGY_MANAGER = keccak256(\"ADD_STRATEGY_MANAGER\");\n    bytes32 public constant REVOKE_STRATEGY_MANAGER = keccak256(\"REVOKE_STRATEGY_MANAGER\");\n    bytes32 public constant FORCE_REVOKE_MANAGER = keccak256(\"FORCE_REVOKE_MANAGER\");\n    bytes32 public constant MAX_DEBT_MANAGER = keccak256(\"MAX_DEBT_MANAGER\");\n    bytes32 public constant DEBT_MANAGER = keccak256(\"DEBT_MANAGER\");\n    bytes32 public constant EMERGENCY_MANAGER = keccak256(\"EMERGENCY_MANAGER\");         \n}"
    },
    "contracts/VaultStructs.sol": {
      "content": "// SPDX-License-Identifier: AGPL 3.0\n// Copyright Fathom 2023\n\npragma solidity ^0.8.16;\n\nstruct StrategyParams {\n    uint256 activation;\n    uint256 lastReport;\n    uint256 currentDebt;\n    uint256 maxDebt;\n}\n\nstruct FeeAssessment {\n    uint256 totalFees;\n    uint256 totalRefunds;\n    uint256 protocolFees;\n    address protocolFeeRecipient;\n}\n\nstruct ShareManagement {\n    uint256 sharesToBurn;\n    uint256 accountantFeesShares;\n    uint256 protocolFeesShares;\n}\n\nstruct WithdrawalState {\n    uint256 requestedAssets;\n    uint256 currTotalIdle;\n    uint256 currTotalDebt;\n    uint256 assetsNeeded;\n    uint256 previousBalance;\n    uint256 unrealisedLossesShare;\n}\n\n// ENUMS\nenum StrategyChangeType {\n    ADDED, // Corresponds to the strategy being added.\n    REVOKED // Corresponds to the strategy being revoked.\n}\n\nenum RoleStatusChange {\n    OPENED, // Corresponds to a role being opened.\n    CLOSED // Corresponds to a role being closed.\n}\n\nenum Rounding {\n    ROUND_DOWN, // Corresponds to rounding down to the nearest whole number.\n    ROUND_UP // Corresponds to rounding up to the nearest whole number.\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10,
      "details": {
        "yul": false
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}